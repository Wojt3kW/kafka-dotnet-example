version: '3.8'

services:
  zookeeper:
    image: docker.io/bitnami/zookeeper:3.8.1
    ports:
      - "2181:2181"
    volumes:
      - '/c/kafka-demo/zookeeper:/bitnami/zookeeper'
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
    networks:
      - kafka-internal

  kafka:
    image: docker.io/bitnami/kafka:3.4.1
    volumes:
      - '/c/kafka-demo/kafka:/bitnami/kafka'
    ports:
      - "9093:9093"
    environment:
      - ALLOW_PLAINTEXT_LISTENER=yes
      - KAFKA_ENABLE_KRAFT=no
      - KAFKA_CFG_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_BROKER_ID=1
      - KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR=1
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CLIENT:PLAINTEXT,EXTERNAL:PLAINTEXT
      - KAFKA_CFG_LISTENERS=CLIENT://:9092,EXTERNAL://:9093
      - KAFKA_CFG_ADVERTISED_LISTENERS=CLIENT://kafka:9092,EXTERNAL://localhost:9093
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=CLIENT
    depends_on:
      - zookeeper
    networks:
      - kafka-internal

 # create kafka topic
  kafka-init:
    image: docker.io/bitnami/kafka:3.4.1
    depends_on:
      kafka:
        condition: service_started
    entrypoint: ['/bin/sh', '-c']
    command: |
      "
      # blocks until kafka is reachable
      ./opt/bitnami/kafka/bin/kafka-topics.sh --bootstrap-server kafka:9092 --list
      echo -e 'Creating kafka topics'
      ./opt/bitnami/kafka/bin/kafka-topics.sh --bootstrap-server kafka:9092 --create --if-not-exists --topic topic-1p --partitions 1
      ./opt/bitnami/kafka/bin/kafka-topics.sh --bootstrap-server kafka:9092 --create --if-not-exists --topic topic-3p --partitions 3
      echo -e 'Successfully created the following topics:'
      ./opt/bitnami/kafka/bin/kafka-topics.sh --bootstrap-server kafka:9092 --list
      "
    networks:
      - kafka-internal

  akhq:
    image: tchiotludo/akhq:0.24.0
    environment:
      AKHQ_CONFIGURATION: |
        akhq:
          connections:
            docker-kafka-server:
              properties:
                bootstrap.servers: "kafka:9092"
    ports:
      - 28080:8080
    depends_on:
      - kafka
    networks:
      - kafka-internal


networks:
  kafka-internal:
    name: kafka-internal